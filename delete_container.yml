---
- hosts: hypervisors
  # remote_user: root
  vars_prompt:
    - name: "host"
      prompt: "what is the container domain to delete?"
      private: no

  tasks:

    - name: Create global host
      add_host:
        name: global
        global_host: "{{ host }}"

    - name: Get vault data
      set_fact:
        host_vars: "{{ hostvars | get(host) }}"

    - name: Get CTID
      set_fact:
        ctid: "{{ host_vars['ctid'] }}"

    - name: Get firewall facts
      set_fact:
        firewall_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        firewall_public_ip: "{{ hostvars[node].public_ip }}"
        firewall_gateway: "{{ hostvars[node].gateway }}"
        firewall_public_ip6: "{{ hostvars[node].public_ip6 }}"
        firewall_gateway6: "{{ hostvars[node].gateway6 }}"
        firewall_mac: "{{ hostvars[node].mac }}"
        firewall_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'firewall'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        reverse_proxy_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get mailinabox facts
      set_fact:
        miab_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        miab_ctid: "{{ hostvars[node].ctid }}"
        miab_domain: "{{ node }}"
      when: hostvars[node].role == 'miab'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Check if CT still exists
      shell: "ls /etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ ctid }}.conf | wc -l"
      register: config_exists

    - name: Get status of container
      command: "pct status {{ ctid }}"
      register: ct_status
      when: config_exists.stdout == '1'

    - name: Remove DNS entries
      command: >
        curl -X POST --user "me@{{ miab_domain }}:{{ miab_pw }}"
        -d "email=system@{{ host }}"
        "https://{{ miab_domain }}/admin/mail/users/remove"
      ignore_errors: yes
      when: host_vars.role not in ('http', 'firewall', 'miab')

    - name: Check if front CT still exists
      shell: "ls /etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ reverse_proxy_ctid }}.conf | wc -l"
      register: front_config_exists

    - name: Get status of front container
      command: "pct status {{ reverse_proxy_ctid }}"
      register: front_ct_status
      when: "front_config_exists.stdout == '1' and host_vars.role != 'http'"

    - name: Remove nginx vhost
      file:
        path: "/rpool/data/encrypted-{{ reverse_proxy_ctid }}/subvol-{{ reverse_proxy_ctid }}-disk-0/etc/nginx/conf.d/10.{{ host }}.conf"
        state: absent
      when: "front_config_exists.stdout == '1' and host_vars.role != 'http'"

    - name: Reload nginx on front container
      command: "pct exec {{ reverse_proxy_ctid }} /etc/init.d/nginx reload"
      ignore_errors: true
      when: "front_config_exists.stdout == '1' and host_vars.role != 'http' and 'running' in front_ct_status.stdout"

    - name: Stop container
      command: "pct stop {{ ctid }}"
      when: "config_exists.stdout == '1' and 'status: running' in ct_status.stdout"

    - name: Remove mountpoint from nginx
      file: 
        path: "/rpool/data/encrypted-{{ reverse_proxy_ctid }}/subvol-{{ reverse_proxy_ctid }}-disk-0/var/www/vhosts/{{ host }}"
        state: absent
      when: "front_config_exists.stdout == '1'"

    - name: Delete container
      command:
        cmd: "pct destroy {{ ctid }}"
        removes: "/etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ ctid }}.conf"

    - name: Remove cron tasks
      cron:
        name: "{{ item }}"
        state: absent
      loop:
        - "Backups for {{ host }}"
        - "Snapshot for {{ host }}"
        - "Snapshot prune for {{ host }}"

    - name: Check if storage still exists
      shell: "pvesm status | grep root-{{ ctid }} | wc -l"
      register: storage_exists

    - name: Remove storage
      command: "pvesm remove root-{{ ctid }}"
      when: storage_exists.stdout == '1'

    - name: Remove ZFS volume
      command:
        cmd: "zfs destroy -r {{ host_vars['pool'] }}"
        removes: "/rpool/data/encrypted-{{ ctid }}"

    - name: Remove host mountpoint
      file:
        path: "/mnt/binds/{{ ctid }}-srv-public"
        state: absent

    - name: Remove host mountpoint (for miab)
      file:
        path: "/mnt/binds/{{ ctid }}-home-user-data-ssl"
        state: absent
      when: host_vars['role'] == 'miab'

# - name: Remove backup account
#   hosts: backup
#   tasks:
#     - name: TODO
#       meta: noop

- name: Remove volume info in vault
  hosts: 127.0.0.1
  connection: local
  tasks:
    # - name: Test
    #   debug:
    #     msg: "hostname: {{ hostvars['new_host'] | hostvars_tojson }}"
    - name: Call remove_host.py
      # command: "./remove_host.py '{{ ctid }}'"
      file:
        path: "./host_vars/{{ hostvars['global'].global_host }}"
...


