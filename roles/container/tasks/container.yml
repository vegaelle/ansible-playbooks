---

- name: "<{{ item }}> Create bridge info"
  set_fact:
    ip: "10.0.{{ vlan }}.{{ ctid }}"

- name: "<{{ item }}> Create ZFS volume"
  command: "zfs create -o encryption=on -o keyformat=passphrase {{ zfs_volume }}"
  args:
    stdin: "{{ passphrase }}"
    creates: "/{{ zfs_volume }}"

- name: "<{{ item }}> Set ZFS options"
  command: "zfs set {{ opt }} {{ zfs_volume }}"
  loop:
    - "xattr=sa"
    - "acltype=posixacl"
  loop_control:
    loop_var: opt

# - name: "<{{ item }}> Mount ZFS volume"
#   command: "zfs mount {{ zfs_volume }}"
#

- name: "<{{ item }}> Check if storage exists"
  shell: "pvesm status | grep root-{{ ctid }} | wc -l"
  register: storage_exists

- name: "<{{ item }}> Create PVE storage"
  command:
    cmd: "pvesm add zfspool root-{{ ctid }} --pool {{ zfs_volume }}"
  when: storage_exists.stdout == '0'

- name: "<{{ item }}> Create snapshot mountpoint"
  file:
    path: "/{{ zfs_volume }}/snapshot"
    state: directory

- name: "<{{ item }}> Create ZFS disk volume"
  command:
    cmd: "zfs create {{ zfs_volume }}/subvol-{{ ctid }}-disk-0"
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0"

- name: "<{{ item }}> Create backups conf dir"
  file:
    path: "/{{ zfs_volume }}/.backups"
    state: directory

- name: "<{{ item }}> Copy backup SSH key"
  copy:
    content: "{{ backup_ssh_key }}"
    dest: "/{{ zfs_volume }}/.backups/{{ item }}-backup"
    mode: "0600"

- name: "<{{ item }}> Create Borg configuration"
  template:
    src: "{{ borgmatic_config_file }}"
    dest: "/{{ zfs_volume }}/.backups/borgmatic.yaml"

- name: "<{{ item }}> Initiate backup"
  command: "/usr/local/bin/borgmatic -c /{{ zfs_volume }}/.backups/borgmatic.yaml init -e repokey"
  ignore_errors: yes
  register: borgmatic_init

- name: "<{{ item }}> Create snapshot cron task"
  cron:
    name: "Snapshot for {{ item }}"
    minute: "{{ inventory_index }}"
    job: "bash -c \"/usr/sbin/zfs snapshot {{ zfs_volume }}/subvol-{{ ctid }}-disk-0@`date +\\%Y-\\%m-\\%d-\\%H-\\%M-\\%S`\""

- name: "<{{ item }}> Create snapshot prune cron task"
  cron:
    name: "Snapshot prune for {{ item }}"
    minute: "5"
    hour: "23"
    job: "bash -c \"/usr/sbin/zfs list -t snapshot -H -S creation -o name {{ zfs_volume }}/subvol-{{ ctid }}-disk-0 | tail -n +25 | xargs -L 1 /usr/sbin/zfs destroy\""

- name: "<{{ item }}> Create backup cron task"
  cron:
    name: "Backups for {{ item }}"
    minute: "10"
    hour: "{{ ( inventory_index|int ) + 2 }}"
    job: "/usr/local/bin/borgmatic -c /{{ zfs_volume }}/.backups/borgmatic.yaml"

- name: "<{{ item }}> Create container"  # WARN: canâ€™t process CT update yet
  command: |
    pct create {{ ctid }} local:vztmpl/{{ image }} --hostname={{ role }}-{{ main_domain }}
    --cores={{ cpu_cores }} --cpuunits={{ cpu_units }} --memory={{ memory }}
    {% if role == 'firewall' %}
    --net0=name=eth0,bridge=vmbr0,firewall=0,gw={{ firewall_gateway }},ip={{ firewall_public_ip }}/32,{% if firewall_public_ip6 %}gw6={{ firewall_gateway6 }},ip6={{ firewall_public_ip6 }},{% endif %}hwaddr={{ firewall_mac }}
    {% else %}
    --net0=name=eth0,bridge=vmbr0,firewall=0{% if vlan != '0' %},tag={{ vlan }}{% endif %},ip=10.0.{{ vlan }}.{{ ctid }}/24,gw={% if vlan != '0' %}10.0.{{ vlan }}.1{% else %}{{ firewall_public_ip }}{% endif %},ip6={{ public_ip6[:17] }}{{ ctid | hex }}:7665:6761:6e62:7477/64,gw6={{ firewall_public_ip6[:17] }}{{ ctid | hex }}::2
    {% endif %}
    --onboot=0 --ostype={{ ostype }} --start=0 --swap={{ swap }}
    --rootfs volume=root-{{ ctid }}:subvol-{{ ctid }}-disk-0,size={{ disk_size }}
  args:
    creates: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/bin"

- name: "<{{ item }}> Copy CT conf file"
  command: "cp /etc/pve/lxc/{{ ctid }}.conf /root/tmp-{{ ctid }}.conf"
  when: ostype == 'alpine'

# thanks to https://unix.stackovernet.com/fr/q/108786
- name: "<{{ item }}> Fix pcap for alpine"
  blockinfile:
    path: "/root/tmp-{{ ctid }}.conf"
    block: |
      # clear cap.drop 
      lxc.cap.drop: 

      # copy drop list from /usr/share/lxc/config/common.conf 
      lxc.cap.drop = mac_admin mac_override sys_time sys_module sys_rawio 

      # copy drop list from /usr/share/lxc/config/alpine.common.conf with setpcap commented 

      lxc.cap.drop = audit_write 
      lxc.cap.drop = ipc_owner 
      lxc.cap.drop = mknod 
      # lxc.cap.drop = setpcap 
      lxc.cap.drop = sys_nice 
      lxc.cap.drop = sys_pacct 
      lxc.cap.drop = sys_ptrace 
      lxc.cap.drop = sys_rawio 
      lxc.cap.drop = sys_resource 
      lxc.cap.drop = sys_tty_config 
      lxc.cap.drop = syslog 
      lxc.cap.drop = wake_alarm 

  when: ostype == 'alpine'

- name: "<{{ item }}> Copy CT conf file back"
  command: "cp /root/tmp-{{ ctid }}.conf /etc/pve/lxc/{{ ctid }}.conf"
  when: ostype == 'alpine'

- name: "<{{ item }}> Remove tmp file"
  file:
    path: "/root/tmp-{{ ctid }}.conf"
    state: absent
  when: ostype == 'alpine'

- name: "<{{ item }}> Set shell prompt for container"
  lineinfile:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/etc/profile"
    line: "export PS1='[{{ ctid }}]\\u@\\h:\\w\\$ '"
    regexp: "^export PS1="

- name: "<{{ item }}> Load /etc/profile from container"
  template:
    src: templates/profile
    dest: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/root/.profile"

- name: "<{{ item }}> Register hook script"
  command: "pct set {{ ctid }} -hookscript local:snippets/hook_script.py"
  when: hostvars[item].role != 'firewall'

- name: "<{{ item }}> Create public dir"
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public"
    state: directory

- name: "<{{ item }}> Create public dir (reverse proxy)"
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/var/{{ dir }}"
    state: directory
    recurse: yes
  loop:
      - var/www/vhosts
      - home/user-data/ssl
  loop_control:
    loop_var: dir
  when: hostvars[item].role == 'http'

- name: "<{{ item }}> Create public dir (miab)"
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/home/user-data/ssl"
    state: directory
    recurse: yes
  when: hostvars[item].role == 'miab'

- name: "<{{ item }}> Get container state"
  shell: "pct list | grep {{ ctid }} | awk '{print $2}'"
  register: container_running

- name: "<{{ item }}> Start container"
  command: "pct start {{ ctid }}"
  when: container_running.stdout == 'stopped'

- name: "<{{ item }}> Update container packages"
  command: "pct exec {{ ctid }} /sbin/apk update"
  when: "ostype == 'alpine'"

- name: "<{{ item }}> Update container packages"
  command: "pct exec {{ ctid }} /usr/bin/apt update"
  when: "ostype == 'ubuntu'"

- name: "<{{ item }}> Install Python3 in container"
  command: "pct exec {{ ctid }} /sbin/apk add python3"
  when: "ostype == 'alpine'"

- name: "<{{ item }}> Install ssh in container"
  command: "pct exec {{ ctid }} /sbin/apk add openssh"
  when: "ostype == 'alpine' and allow_ssh"

- name: "<{{ item }}> Install ssh in container"
  command: "pct exec {{ ctid }} -- /usr/bin/apt install -y openssh-server"
  when: "ostype == 'ubuntu' and allow_ssh"

- name: "<{{ item }}> Start ssh in container"
  command: "pct exec {{ ctid }} /etc/init.d/sshd start"
  when: "ostype == 'alpine' and allow_ssh"

- name: "<{{ item }}> Enable ssh in container"
  command: "pct exec {{ ctid }} rc-update add sshd default"
  when: "ostype == 'alpine' and allow_ssh"

- name: "<{{ item }}> Create public dir in container"
  file:
    path: "/{{ zfs_volume }}/subvol-{{ ctid }}-disk-0/srv/public"
    state: directory
  when: role != 'http'
...
