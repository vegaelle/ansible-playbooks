---
- name: Upgrade system
  apk:
    upgrade: yes
    update_cache: yes

- name: Install tzdata
  apk:
    name: tzdata

- name: Copy timezone data
  copy:
    src: "/usr/share/zoneinfo/{{ timezone }}"
    dest: /etc/localtime
    remote_src: yes

- name: Install nginx
  apk:
    name: nginx

- name: Install git
  apk:
    name: git
  
- name: Install nginx-mod-http-lua (for metrics)
  apk:
    name: nginx-mod-http-lua

- name: Install nginx-lua-exporter
  git:
    repo: 'https://github.com/knyar/nginx-lua-prometheus'
    dest: /opt/nginx-lua-prometheus

- name: Configure nginx-lua-exporter
  blockinfile:
    path: /etc/nginx/nginx.conf
    insertafter: "http {"
    block: |
      lua_shared_dict prometheus_metrics 10M;
      lua_package_path "/usr/share/lua/common/?.lua;/opt/nginx-lua-prometheus/?.lua";
      init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
          "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
          "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
          "nginx_http_connections", "Number of HTTP connections", {"state"})
      }
      log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
      }

- name: Install bash
  apk:
    name: bash
- name: Install openssl
  apk:
    name: openssl

- name: Override vars
  set_fact:
    nginx_limit_conn_zone: "$binary_remote_addr zone=default:40m"
    nginx_limit_conn: "default 20"

- name: Hardening nginx
  include_role:
    name: devsec.hardening.nginx_hardening

- name: Create docroot
  file:
    path: /srv/www/default
    state: directory
    owner: nginx
    group: nginx

- name: Create default index page
  copy:
    src: "files/99.default.conf"
    dest: /etc/nginx/conf.d/99.default.conf
    remote_src: no

- name: Copy default index page
  copy:
    src: /var/lib/nginx/html/index.html
    dest: /srv/www/default/index.html
    owner: nginx
    group: nginx
    remote_src: yes

- name: Create Let's Encrypt challenge config
  template:
    src: "templates/letsencrypt.conf"
    dest: /etc/nginx/letsencrypt.conf

- name: Create global restrictions file
  copy:
    src: "files/restrictions.conf"
    dest: /etc/nginx/restrictions.conf
    remote_src: no

- name: Create Let's Encrypt challenge config 2
  template:
    src: "templates/00-letsencrypt.conf"
    dest: /etc/nginx/conf.d/00-letsencrypt.conf

- name: Make letsencrypt directory
  file:
    path: /etc/ssl/letsencrypt
    state: directory

- name: Get certs
  shell: "ls *.pem | grep -v ssl_private_key | sed 's/.pem//'"
  args:
    chdir: "/etc/ssl/letsencrypt"
  register: certs_found

- name: Delete config files for missing certs
  file:
    path: "/etc/nginx/conf.d/10.{{ item }}.conf"
    state: absent
  loop: "{{ groups['containers'] }}"
  when: "item not in certs_found.stdout.split()"

- name: Create nginx-exporter vhost
  template:
    src: templates/vhost_nginx_exporter.j2
    dest: /etc/nginx/conf.d/90-nginx-lua-exporter.conf

- name: Start nginx
  service:
    name: nginx
    state: started
    runlevel: default

- name: Make nginx run at boot
  command: "rc-update add nginx default"
  ignore_errors: yes

- name: Reload nginx config
  service:
    name: nginx
    state: reloaded

- name: Create SSL mountpoint
  file:
    path: /home/user-data/ssl
    state: directory
    recurse: yes

- name: Create SSL certs dir
  file:
    path: /etc/ssl/letsencrypt
    state: directory

- name: Copy copy-certs script
  copy:
    src: files/copy-certs.sh
    dest: /root/copy-certs.sh
    remote_src: no
    mode: 0700

- name: Create cron task for copy-certs
  cron:
    name: "Copy SSL certs"
    minute: "0"
    hour: "0,12"
    job: "bash /root/copy-certs.sh"

...
