---
- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Create tmp dir
      file:
        path: "tmp"
        state: directory
    - name: Create SSH backup keys
      command:
        argv:
          - "ssh-keygen"
          - "-N"
          - ""
          - "-C"
          - "{{ item }}@{{ item }}"
          - "-m"
          - "PEM"
          - "-f"
          - "tmp/{{ item }}-backup"
        creates: "tmp/{{ item }}-backup"
      ignore_errors: yes
      loop: "{{ groups['containers'] }}"
      when: hostvars[item].backup_ssh_key is not defined
- hosts: hypervisors
  tasks:
    - name: Create containers secrets
      include: tasks/create_container_secrets.yml
      loop: "{{ groups['containers'] }}"

- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Save containers variables
      meta: noop
    - name: Call add_host.py
      command: "./add_host.py --host {{ item }} '{{ hostvars[item] | hostvars_tojson }}'"
      loop: "{{ groups['containers'] }}"
    - name: Remove tmp dir
      file:
        path: tmp
        state: absent

- hosts: backup
  tasks:
    - name: Setup backup servers
      include: tasks/setup_backup.yml

- hosts: monitoring
  tasks:
    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_hostname: "{{ node }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Set roles vars
      include: tasks/roles_vars.yml

    - name: Setup monitoring servers
      include: tasks/setup_monitoring.yml

- hosts: hypervisors
  tasks:

    - name: Get firewall facts
      set_fact:
        firewall_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        firewall_public_ip: "{{ hostvars[node].public_ip }}"
        firewall_gateway: "{{ hostvars[node].gateway }}"
        firewall_public_ip6: "{{ hostvars[node].public_ip6 }}"
        firewall_gateway6: "{{ hostvars[node].gateway6 }}"
        firewall_mac: "{{ hostvars[node].mac }}"
        firewall_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'firewall'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        reverse_proxy_ip6: "{{ firewall_public_ip6[:17] }}{{ hostvars[node].ctid | hex }}:7665:6761:6e62:7477"
        reverse_proxy_ctid: "{{ hostvars[node].ctid }}"
        reverse_proxy_hostname: "{{ node }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get mailinabox facts
      set_fact:
        miab_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        miab_ip6: "{{ firewall_public_ip6[:17] }}{{ hostvars[node].ctid | hex }}:7665:6761:6e62:7477"
        miab_ctid: "{{ hostvars[node].ctid }}"
        miab_domain: "{{ node }}"
      when: hostvars[node].role == 'miab'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Setup hypervisor
      include: tasks/setup_hypervisor.yml

    - name: Set roles vars
      include: tasks/roles_vars.yml

    - name: Create containers
      include: tasks/create_container.yml
      loop: "{{ groups['containers'] }}"

- hosts: containers
  tasks:
    - name: Get firewall facts
      set_fact:
        firewall_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        firewall_public_ip: "{{ hostvars[node].public_ip }}"
        firewall_gateway: "{{ hostvars[node].gateway }}"
        firewall_public_ip6: "{{ hostvars[node].public_ip6 }}"
        firewall_gateway6: "{{ hostvars[node].gateway6 }}"
        firewall_mac: "{{ hostvars[node].mac }}"
        firewall_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'firewall'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Set roles vars
      include: tasks/roles_vars.yml

    - name: Get reverse proxy facts
      set_fact:
        reverse_proxy_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        reverse_proxy_ctid: "{{ hostvars[node].ctid }}"
      when: hostvars[node].role == 'http'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Get mailinabox facts
      set_fact:
        miab_ip: "10.0.{{ hostvars[node].vlan }}.{{ hostvars[node].ctid }}"
        miab_ctid: "{{ hostvars[node].ctid }}"
        miab_domain: "{{ node }}"
      when: hostvars[node].role == 'miab'
      loop: "{{ groups['containers'] }}"
      loop_control:
        loop_var: node

    - name: Setup the containers system
      include_role:
        name: "{{ role }}"
        tasks_from: system

    - name: Finish the containers setup
      include_role:
        name: "{{ role }}"
        tasks_from: post-system

...
