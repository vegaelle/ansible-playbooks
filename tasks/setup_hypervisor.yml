---
- name: Disable Proxmox Enterprise sources
  file:
    path: /etc/apt/sources.list.d/pve-enterprise.list
    state: absent

- name: Enable Proxmox No-Subscription Repository
  copy:
    src: files/sources.list
    dest: /etc/apt/sources.list.d/pve-community.list

- name: Set DNS servers
  template:
    src: templates/resolv.conf
    dest: /etc/resolv.conf

- name: update system
  apt:
    upgrade: dist
    update_cache: yes

- name: Install ifupdown2
  apt:
    name: ifupdown2
    state: present

- name: Disable rpcbind
  systemd:
    name: rpcbind
    state: stopped
    enabled: no

- name: Setup U2F
  lineinfile:
    path: /etc/pve/datacenter.cfg
    line: "webauthn: rp={{hostname}},origin=https://{{ hostname }}:8006,id={{hostname}}"

- name: Ensure that password authentication is disabled
  replace:
    path: /etc/ssh/sshd_config
    regexp: "^#(PasswordAuthentication) yes$"
    replace: "\\1 no"

# - name: Setup EFI (useless now)
#   include: tasks/efi.yml

- name: Update the appliance list
  command: "pveam update"

- name: Download container templates
  command:
    cmd: "pveam download local {{ item }}"
    creates: "/var/lib/vz/template/cache/{{ item }}"
  loop:
    - ubuntu-18.04-standard_18.04.1-1_amd64.tar.gz
    - ubuntu-22.04-standard_22.04-1_amd64.tar.zst
    # - alpine-3.10-default_20190626_amd64.tar.xz
    # - alpine-3.11-default_20200425_amd64.tar.xz
    - alpine-3.15-default_20211202_amd64.tar.xz
    - alpine-3.17-default_20221129_amd64.tar.xz
    - alpine-3.18-default_20230607_amd64.tar.xz
    # - ubuntu-20.04-standard_20.04-1_amd64.tar.gz

- name: Ensure vlan module is loaded
  lineinfile:
    path: /etc/modules
    line: "8021q"

- name: Load vlan module
  modprobe:
    name: "8021q"
    state: present

- name: Create bridge interface
  # blockinfile:
  #   path: /etc/network/interfaces
  #   block: "{{ lookup('file', './files/interfaces') }}"
  template:
    src: templates/interfaces.j2
    dest: /etc/network/interfaces
  register: bridge_task

- name: Reload network
  shell: "ifreload -a"
  when: bridge_task.changed

- name: Set up firewall
  template:
    src: templates/cluster.fw
    dest: /root/etc_pve_firewall_cluster.fw
  register: firewall_file_changed

- name: Create firewall dir
  file:
    path: /etc/pve/firewall
    state: directory

- name: Copy firewall file (workaround)
  command: cp /root/etc_pve_firewall_cluster.fw /etc/pve/firewall/cluster.fw
  when: firewall_file_changed.changed

- name: Create bind mountpoint
  file:
    path: /mnt/binds
    state: directory

- name: Install borgbackup
  apt:
    name: borgbackup

- name: Install pip3
  apt:
    name: python3-pip

- name: Install borgmatic
  pip:
    executable: pip3
    name: borgmatic
    state: latest

- name: Install backup SSH keys
  known_hosts:
    name: "{{ item }}"
    key: "{{ item }} {{ hostvars[item + '-ssh'].public_ssh_key }}"
  loop: "{{ groups['backup'] }}"
  ignore_errors: yes

- name: Copy backup helper scripts
  copy:
    src: "files/{{ item }}-script"
    dest: "/usr/sbin/{{ item }}"
    mode: 0755
    remote_src: no
  loop:
    - backup
    - backup-mount

- name: Install node_exporter
  apt:
    name: prometheus-node-exporter
    state: latest

- name: Ensure node_exporter is running
  service:
    name: prometheus-node-exporter
    state: started

- name: Install pve_exporter
  pip:
    name: prometheus-pve-exporter
    state: latest

- name: Create monitoring group
  command: "pveum groupadd monitoring -comment 'Monitoring group'"
  ignore_errors: yes

- name: Add ACL role to monitoring group
  command: "pveum aclmod / -group monitoring -role PVEAuditor"
  ignore_errors: yes

- name: Create monitoring user
  command: "pveum useradd pve_exporter@pve"
  ignore_errors: yes

- name: Change group for monitoring user
  command: "pveum usermod pve_exporter@pve -group monitoring"
  ignore_errors: yes

- name: Change monitoring password
  command: "pveum passwd pve_exporter@pve"
  args:
    stdin: "{{ pve_exporter_pw }}\n{{ pve_exporter_pw }}"
  ignore_errors: yes

- name: Create PVE exporter directory
  file:
    path: /usr/share/pve_exporter
    state: directory

- name: Configure PVE exporter
  template:
    src: templates/pve_exporter.yml.j2
    dest: /usr/share/pve_exporter/pve_exporter.yml

- name: Copy systemd service file for PVE exporter
  copy:
    src: files/pve_exporter.service.yml
    dest: /etc/systemd/system/pve_exporter.service
    remote_src: no

- name: Reload systemd daemon
  command: systemctl daemon-reload

- name: Enable PVE exporter
  service:
    name: pve_exporter
    state: started
    enabled: yes

- name: Create snippets dir for local storage
  file:
    path: /var/lib/vz/snippets
    state: directory

- name: Update local storage contents
  command: pvesm set local --content iso,backup,vztmpl,snippets

- name: Copy hook_script
  template:
    src: templates/hook_script.py
    dest: /var/lib/vz/snippets/hook_script.py
    mode: '744'

...
